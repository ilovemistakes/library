swagger: "2.0"
info:
  version: 1.0.0
  title: Library storage API
  description: API библиотек СССР для тестового задания fonemica.ru
  contact:
    name: Чупров Алексей
    email: ilovemistakes@mail.ru
host: storage.local
basePath: /api/v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /book:
    get:
      tags: ["book"]
      description: |
        Возвращает все книги из всех библиотек
      responses:
        200:
          description: список книг
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /book/{id}:
    get:
      tags: ["book"]
      description: Возвращает книгу по ID
      parameters:
        - name: id
          in: path
          description: ID книги
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: книга
          schema:
            $ref: '#/definitions/Book'
        404:
          description: объект не найден
          schema:
            $ref: '#/definitions/Error'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /library:
    get:
      tags: ["library"]
      description: |
        Возвращает все библиотеки
      responses:
        200:
          description: список библиотек
          schema:
            type: array
            items:
              $ref: '#/definitions/Library'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /library/{id}:
    get:
      tags: ["library"]
      description: Возвращает библиотеку по ID
      parameters:
        - name: id
          in: path
          description: ID библиотеки
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: библиотека
          schema:
            $ref: '#/definitions/Library'
        404:
          description: объект не найден
          schema:
            $ref: '#/definitions/Error'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /library/{id}/books:
    get:
      tags: ["library"]
      description: Возвращает все книги, которые принадлежат библиотеке
      parameters:
        - name: id
          in: path
          description: ID библиотеки для поиска книг
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: список книг
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        404:
          description: объект не найден
          schema:
            $ref: '#/definitions/Error'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /record:
    get:
      tags: ["record"]
      description: |
        Возвращает все записи о всех книгах
      responses:
        200:
          description: список записей
          schema:
            type: array
            items:
              $ref: '#/definitions/Record'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
    post:
      tags: ["record"]
      description: |
        Создаёт новую запись о взятии/возврате книги
      parameters:
        - name: record
          in: body
          description: запись
          required: true
          schema:
            $ref: '#/definitions/NewRecord'
      responses:
        201:
          description: пренаправление на созданную запись
          headers:
            Location:
              description: URL новой записи
              type: string
              default: api/v1/records/5742983
          schema:
            $ref: '#/definitions/Error'
        400:
          description: неверные параметры, или книга уже взята/возвращена
          schema:
            $ref: '#/definitions/Error'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /record/{id}:
    get:
      tags: ["record"]
      description: Возвращает запись о книге ID
      parameters:
        - name: id
          in: path
          description: ID записи
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: запись
          schema:
            $ref: '#/definitions/Record'
        404:
          description: объект не найден
          schema:
            $ref: '#/definitions/Error'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /user:
    get:
      tags: ["user"]
      description: |
        Возвращает всех читателей
      responses:
        200:
          description: список читателей
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /user/{id}:
    get:
      tags: ["user"]
      description: Возвращает читателя по ID
      parameters:
        - name: id
          in: path
          description: ID читателя
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: читатель
          schema:
            $ref: '#/definitions/User'
        404:
          description: объект не найден
          schema:
            $ref: '#/definitions/Error'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /user/{name}:
    get:
      tags: ["user"]
      description: Возвращает читателя по имени
      parameters:
        - name: name
          in: path
          description: имя читателя
          required: true
          type: string
      responses:
        200:
          description: читатель
          schema:
            $ref: '#/definitions/User'
        404:
          description: объект не найден
          schema:
            $ref: '#/definitions/Error'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /user/{id}/report/books:
    get:
      tags: ["user", "book"]
      description: Возвращает все книги, которые находятся на руках у читателя
      parameters:
        - name: id
          in: path
          description: ID читателя
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: список книг
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        404:
          description: объект не найден
          schema:
            $ref: '#/definitions/Error'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /user/{name}/report/books:
    get:
      tags: ["user", "book"]
      description: Возвращает все книги, которые находятся на руках у читателя, по имени читателя
      parameters:
        - name: name
          in: path
          description: имя читателя
          required: true
          type: string
      responses:
        200:
          description: список книг
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        404:
          description: объект не найден
          schema:
            $ref: '#/definitions/Error'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /user/{id}/report/records:
    get:
      tags: ["user", "record"]
      description: Возвращает все записи про читателя
      parameters:
        - name: id
          in: path
          description: ID читателя
          required: true
          type: integer
          format: int64
        - name: from
          in: query
          description: начало периода
          required: false
          type: string
          format: date-time
        - name: to
          in: query
          description: конец периода
          required: false
          type: string
          format: date-time
      responses:
        200:
          description: список записей
          schema:
            type: array
            items:
              $ref: '#/definitions/Record'
        404:
          description: объект не найден
          schema:
            $ref: '#/definitions/Error'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
  /user/{name}/report/records:
    get:
      tags: ["user", "record"]
      description: Возвращает все записи про читателя по имени
      parameters:
        - name: name
          in: path
          description: имя читателя
          required: true
          type: string
        - name: from
          in: query
          description: начало периода
          required: false
          type: string
          format: date-time
        - name: to
          in: query
          description: конец периода
          required: false
          type: string
          format: date-time
      responses:
        200:
          description: список записей
          schema:
            type: array
            items:
              $ref: '#/definitions/Record'
        404:
          description: объект не найден
          schema:
            $ref: '#/definitions/Error'
        500:
          description: непредвиденная ошибка
          schema:
            $ref: '#/definitions/Error'
definitions:
  Book:
    allOf:
      - required:
        - id
        properties:
          id:
            type: integer
            format: int64
      - $ref: '#/definitions/NewBook'
  NewBook:
    required:
      - name
      - author
    properties:
      name:
        type: string
      author:
        type: string
  Library:
    allOf:
      - required:
        - id
        properties:
          id:
            type: integer
            format: int64
      - $ref: '#/definitions/NewLibrary'
  NewLibrary:
    required:
      - name
    properties:
      name:
        type: string
  Record:
    required:
      - id
      - action
      - created
      - user
      - book
    properties:
      id:
        type: integer
        format: int64
      action:
        type: string
        enum: ["take", "return"]
      created:
        type: string
        format: date-time
      user:
        type: object
        $ref: '#/definitions/User'
      book:
        type: object
        $ref: '#/definitions/Book'
  NewRecord:
    required:
      - action
      - created
      - user
      - book
    properties:
      action:
        type: string
        enum: ["take", "return"]
      created:
        type: string
        format: date-time
      user:
        type: object
        $ref: '#/definitions/IdOnly'
      book:
        type: object
        $ref: '#/definitions/IdOnly'
  User:
    allOf:
      - required:
        - id
        properties:
          id:
            type: integer
            format: int64
      - $ref: '#/definitions/NewUser'
  NewUser:
    required:
      - name
    properties:
      name:
        type: string
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  IdOnly:
    required:
      - id
    properties:
      id:
        type: integer
        format: int64
